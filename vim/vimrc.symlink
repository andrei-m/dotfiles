" ----------------------------------------------------------------------------
"  runtimepath management
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
Plug 'fatih/vim-go'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/syntastic'
Plug 'hashivim/vim-terraform'
call plug#end()

" ----------------------------------------------------------------------------
"  File Handling
" ----------------------------------------------------------------------------
set backupdir=~/.vim-tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,/var/tmp,/tmp
set noswapfile

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set enc=utf-8
set autoindent
set smartindent
inoremap # X<BS>#
set softtabstop=2
set shiftwidth=2
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab
set virtualedit=block      " allow virtual edit in visual block ..

" Make shift-tab insert real tabs
inoremap <S-Tab> <C-V><Tab>

" ----------------------------------------------------------------------------
"  FZF
" ----------------------------------------------------------------------------
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

noremap <C-P> :FZF<CR>
noremap <C-G> :GGrep<CR>

" quickfix navigation
noremap <Leader>e :cfir<CR>
noremap <Leader>n :cn<CR>
noremap <Leader>p :cp<CR>

:noremap <Leader>ev :e $MYVIMRC<cr>
:noremap <Leader>sv :source $MYVIMRC<cr>

:noremap <Leader>sp :set paste<cr>
:noremap <Leader>np :set nopaste<cr>

" omnicomplete
inoremap <Leader>, <C-x><C-o>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw
set number
set wildmenu
set wildmode=list:longest,full
set ch=1                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set statusline=%f\ %m\ %{go#statusline#Show()}%=%c,%l/%L

" ----------------------------------------------------------------------------
"  Syntax
" ----------------------------------------------------------------------------
syntax enable
filetype plugin indent on
syntax on

" ----------------------------------------------------------------------------
" Go
" ----------------------------------------------------------------------------

" Enable syntax highlighting for go templates
au BufNewFile,BufRead *.tmpl set filetype=gotexttmpl

au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <Leader>d <Plug>(go-def)
au FileType go nmap <Leader>dx <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>ga <Plug>(go-alternate-edit)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gi <Plug>(go-imports)
au FileType go nmap <Leader>gm <Plug>(go-implements)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gr <Plug>(go-referrers)
au FileType go nmap <Leader>ge <Plug>(go-iferr)
au FileType go nmap <Leader>i <Plug>(go-info)

" Tab settings for Go
au BufNewFile,BufRead *.go,*.tmpl set softtabstop=4 shiftwidth=4 tabstop=4 noexpandtab
au BufWritePost *.go silent :GoTestCompile<CR>

" Disable Syntastic for Go
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"

" Auto-format Terraform files
let g:terraform_fmt_on_save = 1

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set nohlsearch             " don't highlight searches
set visualbell             " shut the fuck up

" ----------------------------------------------------------------------------
" System
" ----------------------------------------------------------------------------
set shell=/bin/zsh

"  Strip all trailing whitespace in file
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map <Leader>sw :call StripWhitespace ()<CR>
